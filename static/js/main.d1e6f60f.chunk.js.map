{"version":3,"sources":["mesage-item.js","message-list.js","input.js","App.js","serviceWorker.js","index.js"],"names":["messageItem","react_default","a","createElement","className","this","props","user","message","userName","React","Component","MessageItem","_this","messages","map","item","mesage_item_messageItem","key","id","name","App","e","console","log","keyCode","sendMessage","refs","messageInput","ref","type","placeholder","onKeyUp","checkEnter","bind","onClick","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","userOnline","socket","_this2","io","on","response","newMessage","alert","setState","m","ids","_map","max","Math","apply","toConsumableArray","push","userId","data","objMessage","$","scrollHeight","scrollTop","clientHeight","animate","prop","value","emit","message_list_MessageItem","typing","input_App","sendnewMessage","login","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1e6f60f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class messageItem extends React.Component {\r\n    render () {\r\n        return (\r\n            <li className={this.props.user? \"message right appeared\": \"message left appeared\"}>\r\n                <div className=\"avatar\"></div>\r\n                <div className=\"text_wrapper\">\r\n                    <div className=\"text\"><b>{this.props.message.userName}</b><br></br>{this.props.message.message}</div>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Message from './mesage-item';\r\n\r\n\r\nexport default class MessageItem extends React.Component {\r\n    render () {\r\n        return (\r\n            <ul className=\"messages\">\r\n                {this.props.messages.map(item =>\r\n                    <Message key={item.id} user={item.userName === this.props.user.name? true: false} message={item}/>\r\n                )}\r\n            </ul>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class App extends React.Component {\r\n\r\n    checkEnter(e) {\r\n      console.log(e)\r\n      if (e.keyCode === 13) {\r\n        this.props.sendMessage(this.refs.messageInput);\r\n      }\r\n    }\r\n    render () {\r\n        return (\r\n           <div className=\"\">\r\n               <div className=\"bottom_wrapper\">\r\n                   <div  className=\"message_input_wrapper\">\r\n                        <input ref=\"messageInput\" type=\"text\" className=\"message_input\" placeholder=\"Type your message here\" onKeyUp={this.checkEnter.bind(this)} />\r\n                   </div>\r\n                   <div className=\"send_message\" onClick={() => this.props.sendMessage(this.refs.messageInput)} ref=\"inputMessage\" >\r\n                        <div className='icon'></div>\r\n                        <div className='text'>Send</div>\r\n                   </div>\r\n               </div>\r\n           </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport $ from 'jquery';\nimport Messages from './message-list';\nimport Input from './input';\nimport _map from 'lodash/map';\nimport io from 'socket.io-client';\n\nimport './App.css';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        //Khởi tạo state,\n        this.state = {\n            messages: [], // danh sách tin nhắn\n            user: {id: '', name: ''},// người dùng hiện tại, nếu rỗng sẽ hiển thị form login, có sẽ hiển thị phòng chat\n            userOnline:[] // danh sách người dùng đang online\n        }\n        this.socket = null;\n    }\n    //Connetct với server nodejs, thông qua socket.io\n    componentWillMount() {\n        console.log(this.state.user)\n        this.socket = io('https://roomchat123.herokuapp.com/'); // heroku\n        this.socket.on('newMessage', (response) => {this.newMessage(response)}); //lắng nghe khi có tin nhắn mới\n        this.socket.on('loginFail', (response) => {alert('Tên đã có người sử dụng')}); //login fail\n        this.socket.on('loginSuccess', (response) => {this.setState({user: {id: this.socket.id, name: response}})}); //đăng nhập thành công \n         this.socket.on('updateUesrList', (response) => {this.setState({userOnline: response})}); //update lại danh sách người dùng online khi có người đăng nhập hoặc đăng xuất\n\n    }\n    //Khi có tin nhắn mới, sẽ push tin nhắn vào state mesgages, và nó sẽ được render ra màn hình\n    newMessage(m) {\n        const messages = this.state.messages;\n        let ids = _map(messages, 'id');\n        let max = Math.max(...ids);\n        messages.push({\n            id: max+1,\n            userId: m.user.id,\n            message: m.data,\n            userName: m.user.name\n        });\n        let objMessage = $('.messages');\n        if (objMessage[0].scrollHeight - objMessage[0].scrollTop === objMessage[0].clientHeight ) {\n            this.setState({messages});\n            objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 300); //tạo hiệu ứng cuộn khi có tin nhắn mới\n\n        } else {\n            this.setState({messages});\n            if (m.id === this.state.user) {\n                objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 300);\n            }\n        }\n    }\n    //Gửi event socket newMessage với dữ liệu là nội dung tin nhắn và người gửi\n    sendnewMessage(m) {\n        if (m.value) {\n            this.socket.emit(\"newMessage\", {data:m.value, user: this.state.user}); //gửi event về server\n            m.value = \"\"; \n        }\n    }\n    //login để định danh người dùng\n    login() {\n        this.socket.emit(\"login\", this.refs.name.value); \n    }\n\n    render () {\n        return (\n           <div className=\"app__content\">\n              <h1 className='big-title'>chat box</h1>\n          {/* kiểm tra xem user đã tồn tại hay chưa, nếu tồn tại thì render form chat, chưa thì render form login */}\n              { this.state.user.id && this.state.user.name ? \n                <div className=\"chat_window\">\n                    {/* danh sách user online */}\n                    <div className=\"menu\">\n                        <ul className=\"user\">\n                        <span className=\"user-name\">{this.state.user.name}</span>\n                            <p>Online</p>\n                            {this.state.userOnline.map(item =>\n                                <li key={item.id}><span>{item.name}</span></li>\n                            )}\n                        </ul>\n                    </div>\n                {/* danh sách message */}\n                    <div className=\"content\">\n                        <Messages user={this.state.user} messages={this.state.messages} typing={this.state.typing}/>\n                        <Input sendMessage={this.sendnewMessage.bind(this)}/>\n                    </div>\n                </div> \n                :\n                  <div className=\"login_form\">{/* form login */}\n                      <input type=\"text\" name=\"name\" ref=\"name\" className='login-form' placeholder='Enter your name to join our chat room'></input>\n                      <input type=\"button\" name=\"\" value=\"Login\" onClick={this.login.bind(this)} className='login-btn'></input>\n                  </div>\n              }\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}